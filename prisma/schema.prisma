// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider = "prisma-pothos-types"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  MEMBER
  ADMIN
}

model User {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  email String @unique
  name  String
  role  Role   @default(MEMBER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
  posts    Post[]
}

model Password {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  hashed String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  emoji     String
  content   String
  tags      PostTag[]
  published Boolean   @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId String @db.ObjectId
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Tag {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  name  String  @unique
  image String?

  // Postとのリレーション
  posts PostTag[]
}

model PostTag {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  postId String @db.ObjectId
  tagId  String @db.ObjectId

  // Postとのリレーション
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // Tagとのリレーション
  tag Tag @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // 複合主キーを設定
  @@unique(fields: [postId, tagId])
}
